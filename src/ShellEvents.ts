export type EventType =
  | 'V1.REQUIRE_CONTEXT'
  | 'V1.REQUIRE_AUTHENTICATION'
  | 'V1.REQUIRE_PERMISSIONS'
  | 'V1.GET_PERMISSIONS'
  | 'V2.GET_PERMISSIONS'
  | 'V1.GET_SETTINGS'
  | 'V1.GET_STORAGE_ITEM'
  | 'V2.GET_STORAGE_ITEM'
  | 'V1.SET_STORAGE_ITEM'
  | 'V1.SET_VIEW_STATE'
  | 'V1.SET_TITLE'
  | 'V1.RESTORE_TITLE'
  | 'V1.TO_APP'
  | 'V1.LOADING_SUCCESS'
  | 'V1.GET_FEATURE_FLAG'
  | 'V1.PRIVATE.GET_ACCOUNT_SETTINGS'
  | 'V1.OUTLET.ADD_PLUGIN'
  | 'V1.OUTLET.REMOVE_PLUGIN'
  | 'V1.OUTLET.REQUEST_CONTEXT'
  | 'V1.OUTLET.REQUEST_DYNAMIC_CONTEXT'
  | 'V1.OUTLET.LOADING_SUCCESS'
  | 'V1.OUTLET.LOADING_FAIL'
  | 'V1.MODAL.OPEN'
  | 'V1.MODAL.CLOSE'
  | string;

export const SHELL_EVENTS = {
  Version1: {
    REQUIRE_CONTEXT: 'V1.REQUIRE_CONTEXT',
    REQUIRE_AUTHENTICATION: 'V1.REQUIRE_AUTHENTICATION',
    REQUIRE_PERMISSIONS: 'V1.REQUIRE_PERMISSIONS',
    GET_PERMISSIONS: 'V1.GET_PERMISSIONS',
    GET_SETTINGS: 'V1.GET_SETTINGS',
    GET_STORAGE_ITEM: 'V1.GET_STORAGE_ITEM',
    SET_STORAGE_ITEM: 'V1.SET_STORAGE_ITEM',
    SET_VIEW_STATE: 'V1.SET_VIEW_STATE',
    SET_TITLE: 'V1.SET_TITLE',
    RESTORE_TITLE: 'V1.RESTORE_TITLE',
    TO_APP: 'V1.TO_APP',
    GET_FEATURE_FLAG: 'V1.GET_FEATURE_FLAG',
    PRIVATE: {
      GET_ACCOUNT_SETTINGS: 'V1.PRIVATE.GET_ACCOUNT_SETTINGS',
    },
    OUTLET: {
      ADD_PLUGIN: 'V1.OUTLET.ADD_PLUGIN',
      REMOVE_PLUGIN: 'V1.OUTLET.REMOVE_PLUGIN',
      REQUEST_CONTEXT: 'V1.OUTLET.REQUEST_CONTEXT',
      REQUEST_DYNAMIC_CONTEXT: 'V1.OUTLET.REQUEST_DYNAMIC_CONTEXT',
      LOADING_SUCCESS: 'V1.OUTLET.LOADING_SUCCESS',
      LOADING_FAIL: 'V1.OUTLET.LOADING_FAIL',
    },
    MODAL: {
      OPEN: 'V1.MODAL.OPEN',
      CLOSE: 'V1.MODAL.CLOSE',
    },
  },
  Version2: {
    GET_STORAGE_ITEM: 'V2.GET_STORAGE_ITEM',
    GET_PERMISSIONS: 'V2.GET_PERMISSIONS',
  },
  ERROR: 'ERROR',
};

export enum ErrorType {
  OUTLET_TIMEOUT = 'OUTLET_TIMEOUT',
  OUTLET_MAXIMUM_DEPTH = 'OUTLET_MAXIMUM_DEPTH',
  OUTLET_HTTPS_ERROR = 'OUTLET_HTTPS_ERROR',
}

const getKeyValues = (source: any, initial: string[] = []): string[] => {
  let result = [...initial];
  for (const key in source) {
    if (typeof source[key] === 'string') {
      result.push(source[key]);
    } else if (typeof source[key] === 'object') {
      result = getKeyValues(source[key], result);
    }
  }
  return result;
};

export const ALL_SHELL_EVENTS_ARRAY: string[] = getKeyValues(SHELL_EVENTS);
